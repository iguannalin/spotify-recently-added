{"version":3,"sources":["Track/Track.js","Playlist/Playlist.js","Home/Home.js","App.js","index.js"],"names":["Track","className","href","this","props","track","link","name","artists","map","artist","index","key","Component","Playlist","state","playlist","playlistURI","ruri","userID","at","playlistCreated","endpoints","authorize","token","users","links","authLink","getLibrary","bind","getToken","getUserID","generateAuthLink","addTracksToPlaylist","createPlaylist","code","scopes","encodeURIComponent","setState","mid","ac","refreshToken","sessionStorage","getItem","grantType","codeType","encodedBody","window","btoa","ms","fetch","method","headers","body","then","r","ok","json","removeItem","console","error","data","access_token","refresh_token","setItem","compileList","tracks","items","forEach","object","item","external_urls","spotify","albumArt","album","images","tempPlaylist","tempPlaylistURI","push","uri","snapshotID","id","playlistID","JSON","stringify","status","emssage","snapshot_id","length","onClick","Home","submitted","getCode","retrieve","handleSubmit","handleUserInput","URLSearchParams","location","search","get","e","preventDefault","event","target","value","onSubmit","type","onChange","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1bfa935d.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Track extends Component {\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"track-title\">\n                    <a href={this.props.track.link}>{this.props.track.name}</a>\n                </div>\n                <div className=\"track-artist\">\n                    {\n                        this.props.track.artists.map((artist, index) => {\n                            return (<a href={artist.link} key={index}>{artist.name}</a>);\n                        })\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Track;\n","import React, {Component} from 'react';\nimport Track from '../Track/Track';\nimport './Playlist.scss';\n\n// TODO Generate a playlist for user, and add custom playlist cover\nclass Playlist extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playlist: [],\n            playlistURI: [],\n            ruri: 'https://iguannalin.github.io/spotify-recently-added/',\n            userID: '',\n            at: '',\n            playlistCreated: false,\n            endpoints: {\n                authorize: 'https://accounts.spotify.com/authorize',\n                token: 'https://accounts.spotify.com/api/token',\n                users: 'https://api.spotify.com/v1/'\n            },\n            links: {\n                authLink: ''\n            }\n        };\n        this.getLibrary = this.getLibrary.bind(this);\n        this.getToken = this.getToken.bind(this);\n        this.getUserID = this.getUserID.bind(this);\n        this.generateAuthLink = this.generateAuthLink.bind(this);\n        this.addTracksToPlaylist = this.addTracksToPlaylist.bind(this);\n        this.createPlaylist = this.createPlaylist.bind(this);\n    };\n\n    componentDidMount() {\n        this.generateAuthLink();\n        this.getToken(this.props.code);\n    }\n\n    generateAuthLink() {\n        const scopes = encodeURIComponent('user-library-read playlist-modify-private');\n        this.setState({\n            links: {\n                authLink: (this.state.endpoints.authorize + '?client_id=' + this.props.mid + '&response_type=code&redirect_uri=' + this.state.ruri + '&scope=' + scopes)\n            }\n        });\n    }\n\n    getToken(ac) {\n        const refreshToken = sessionStorage.getItem('mtoken');\n        let grantType = 'authorization_code';\n        let codeType = 'code';\n        if (refreshToken && refreshToken !== \"undefined\") {\n            this.setState({at: refreshToken});\n            ac = refreshToken;\n            grantType = 'refresh_token';\n            codeType = 'refresh_token';\n        }\n\n        const encodedBody = window.btoa(this.props.mid + ':' + this.props.ms);\n        fetch(this.state.endpoints.token, {\n            method: 'POST',\n            'Access-Control-Allow-Headers': {\n                'mode': 'no-cors',\n                'access-control-allow-origin': '*'\n            },\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': `Basic ${encodedBody}`\n            },\n            body: `grant_type=${grantType}&${codeType}=${ac}&redirect_uri=${this.state.ruri}`,\n        })\n            .then(r => {\n                if (r.ok) return r.json();\n                else {\n                    sessionStorage.removeItem('mcode');\n                    console.error('Error: getToken');\n                }\n            })\n            .then(data => {\n                if (data && data.access_token) {\n                    this.setState({\n                        at: data.access_token\n                    });\n                    if (data.refresh_token) sessionStorage.setItem('mtoken', data.refresh_token);\n                    this.getLibrary();\n                }\n            });\n\n    }\n\n    getLibrary() {\n        fetch('https://api.spotify.com/v1/me/tracks?limit=20', {\n            'Access-Control-Allow-Headers': {\n                'mode': 'no-cors',\n                'access-control-allow-origin': '*'\n            },\n            headers: {\n                'Authorization': `Bearer ${this.state.at}`\n            }\n        })\n            .then(r => {\n                if (r.ok) return r.json(); else {\n                    console.error('Error: getLibrary');\n                    sessionStorage.removeItem('mtoken');\n                }\n            })\n            .then(data => {\n                if (data) this.compileList(data);\n            })\n            .then(() => {\n                this.getUserID();\n            });\n    }\n\n    compileList(tracks) {\n        this.setState(() => {\n            return {playlist: []}\n        });\n        if (tracks && tracks.items) {\n            tracks.items.forEach(object => {\n                    const item = object.track;\n                    const track = {\n                        name: item.name,\n                        link: item.external_urls.spotify,\n                        artists: item.artists.map(artist => {\n                            return {name: artist.name, link: artist.external_urls.spotify}\n                        }),\n                        albumArt: item.album.images\n                    };\n                    const tempPlaylist = this.state.playlist;\n                    const tempPlaylistURI = this.state.playlistURI;\n                    tempPlaylist.push(track);\n                    tempPlaylistURI.push(item.uri);\n                    this.setState({\n                        playlist: tempPlaylist,\n                        playlistURI: tempPlaylistURI\n                    })\n                }\n            );\n        }\n    }\n\n    createPlaylist() {\n        const snapshotID = sessionStorage.getItem('playlistSnapshot');\n        if (snapshotID) {\n            this.addTracksToPlaylist(snapshotID);\n        } else {\n            fetch(this.state.endpoints.users + 'users/' + this.state.userID + '/playlists', {\n                method: 'POST',\n                'Access-Control-Allow-Headers': {\n                    'mode': 'no-cors',\n                    'access-control-allow-origin': '*'\n                },\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.state.at}`\n                },\n                body: `{\"name\":\"Recently Added\",\"public\":false,\"description\":\"Your top 20 recently added Spotify tracks :) Courtesy of Anna; Happy 2020!\"}`\n            })\n                .then(r => {\n                    if (r.ok) return r.json();\n                    else console.error('Error: createPlaylist');\n                })\n                .then(data => {\n                    if (data) this.addTracksToPlaylist(data.id);\n                });\n        }\n    }\n\n    addTracksToPlaylist(playlistID) {\n        fetch(this.state.endpoints.users + 'playlists/' + playlistID + '/tracks', {\n            method: 'POST',\n            'Access-Control-Allow-Headers': {\n                'mode': 'no-cors',\n                'access-control-allow-origin': '*'\n            },\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${this.state.at}`\n            },\n            body: `{\"uris\":${JSON.stringify(this.state.playlistURI)}}`\n        })\n            .then(r => r.json())\n            .then(data => {\n                if (data.error.status >= 400 && data.error.emssage === 'Invalid playlist Id') {\n                    sessionStorage.removeItem('playlistSnapshot');\n                    this.createPlaylist();\n                } else if (data) {\n                    sessionStorage.setItem('playlistSnapshot', data.snapshot_id);\n                    this.setState({playlistCreated: true})\n                }\n            });\n    }\n\n    getUserID() {\n        fetch((this.state.endpoints.users + 'me'), {\n            'Access-Control-Allow-Headers': {\n                'mode': 'no-cors',\n                'access-control-allow-origin': '*'\n            },\n            headers: {\n                'Authorization': `Bearer ${this.state.at}`\n            }\n        })\n            .then(r => {\n                if (r.ok) return r.json();\n                else console.error('Error: getUserID');\n            })\n            .then(data => {\n                    if (data) {\n                        this.setState({userID: data.id});\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <div className=\"Playlist\">\n                {this.state.playlist.length > 0 ? (\n                    <div className=\"button-div position-right\">\n                        {this.state.playlistCreated ? (<p className=\"button-link\">Done!</p>) :\n                            (<button className=\"button-link\" onClick={this.createPlaylist}>Create this playlist on\n                                Spotify for me\n                            </button>)\n                        }\n                    </div>) : (\n                    <div className=\"button-div\"><a href={this.state.links.authLink}>Click on me to authorize\n                        Spotify</a>\n                    </div>\n                )}\n                <ul>\n                    {this.state.playlist.map(\n                        (track, index) => {\n                            return (\n                                <li key={index}><Track track={track}/></li>\n                            )\n                        }\n                    )\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Playlist;\n","import React, {Component} from 'react';\nimport Playlist from '../Playlist/Playlist';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mid: '',\n            ms: '',\n            code: '',\n            submitted: false\n        };\n\n        this.getCode = this.getCode.bind(this);\n        this.retrieve = this.retrieve.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleUserInput = this.handleUserInput.bind(this);\n    }\n\n    componentDidMount() {\n        this.getCode();\n        this.retrieve();\n    }\n\n\n    getCode() {\n        const urlParams = new URLSearchParams(window.location.search);\n        const code = urlParams.get('code');\n        this.setState({\n            code: code,\n            submitted: !!(code)\n        });\n        sessionStorage.setItem('mcode', code);\n    }\n\n    retrieve() {\n        // TODO: implement a reset sessionStorage, in case user wants to change ID\n        if (!this.state.mid && sessionStorage.getItem('mid')) {\n            this.setState({\n                mid: sessionStorage.getItem('mid'),\n                ms: sessionStorage.getItem('ms')\n            });\n        }\n    }\n\n    handleSubmit(e) {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState({\n            submitted: true\n        });\n    }\n\n    handleUserInput(event) {\n        if (event.target.name === 'mid') {\n            this.setState({\n                mid: event.target.value\n            });\n            sessionStorage.setItem('mid', event.target.value);\n        } else if (event.target.name === 'ms') {\n            this.setState({\n                ms: event.target.value\n            });\n            sessionStorage.setItem('ms', event.target.value);\n        }\n    }\n\n    render() {\n        if ((this.state.mid && this.state.ms) || (this.state.submitted || this.state.code)) {\n            return (\n                <div className=\"Home\">\n                    <Playlist mid={this.state.mid} ms={this.state.ms} code={this.state.code}/>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"login-form\">\n                    <div className=\"login-form card\">\n                        <h2>To use this app, enter your client ID & secret here:</h2>\n                        <form onSubmit={this.handleSubmit}>\n                            <div>\n                                <label>Client ID:\n                                    <input type=\"text\" name=\"mid\" onChange={this.handleUserInput}/></label>\n                            </div>\n                            <div>\n                                <label>Secret:\n                                    <input type=\"text\" name=\"ms\" onChange={this.handleUserInput}/></label>\n                            </div>\n                            <div className=\"login-form buttons\">\n                                <input type=\"submit\" value=\"Submit\"/>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Home\n","import React from 'react';\nimport './App.css';\nimport Home from './Home/Home';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Home/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}