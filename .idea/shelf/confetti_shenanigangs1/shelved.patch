Index: src/Playlist/Playlist.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {Component} from 'react';\nimport Track from '../Track/Track';\nimport './Playlist.scss';\n\n// TODO Generate a playlist for user, and add custom playlist cover\nclass Playlist extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playlist: [],\n            playlistURI: [],\n            ruri: 'https://iguannalin.github.io/spotify-recently-added/',\n            userID: '',\n            at: '',\n            playlistCreated: false,\n            endpoints: {\n                authorize: 'https://accounts.spotify.com/authorize',\n                token: 'https://accounts.spotify.com/api/token',\n                users: 'https://api.spotify.com/v1/'\n            },\n            links: {\n                authLink: ''\n            }\n        };\n        this.getLibrary = this.getLibrary.bind(this);\n        this.getToken = this.getToken.bind(this);\n        this.getUserID = this.getUserID.bind(this);\n        this.generateAuthLink = this.generateAuthLink.bind(this);\n        this.addTracksToPlaylist = this.addTracksToPlaylist.bind(this);\n        this.createPlaylist = this.createPlaylist.bind(this);\n    };\n\n    componentDidMount() {\n        this.generateAuthLink();\n        this.getToken(this.props.code);\n    }\n\n    generateAuthLink() {\n        const scopes = encodeURIComponent('user-library-read playlist-modify-private');\n        this.setState({\n            links: {\n                authLink: (this.state.endpoints.authorize + '?client_id=' + this.props.mid + '&response_type=code&redirect_uri=' + this.state.ruri + '&scope=' + scopes)\n            }\n        });\n    }\n\n    getToken(ac) {\n        const refreshToken = sessionStorage.getItem('mtoken');\n        let grantType = 'authorization_code';\n        let codeType = 'code';\n        if (refreshToken && refreshToken !== \"undefined\") {\n            this.setState({at: refreshToken});\n            ac = refreshToken;\n            grantType = 'refresh_token';\n            codeType = 'refresh_token';\n        }\n\n        const encodedBody = window.btoa(this.props.mid + ':' + this.props.ms);\n        fetch(this.state.endpoints.token, {\n            method: 'POST',\n            'Access-Control-Allow-Headers': {\n                'mode': 'no-cors',\n                'access-control-allow-origin': '*'\n            },\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': `Basic ${encodedBody}`\n            },\n            body: `grant_type=${grantType}&${codeType}=${ac}&redirect_uri=${this.state.ruri}`,\n        })\n            .then(r => {\n                if (r.ok) return r.json();\n                else {\n                    sessionStorage.removeItem('mcode');\n                    console.error('Error: getToken');\n                }\n            })\n            .then(data => {\n                if (data && data.access_token) {\n                    this.setState({\n                        at: data.access_token\n                    });\n                    if (data.refresh_token) sessionStorage.setItem('mtoken', data.refresh_token);\n                    this.getLibrary();\n                }\n            });\n\n    }\n\n    getLibrary() {\n        fetch('https://api.spotify.com/v1/me/tracks?limit=20', {\n            'Access-Control-Allow-Headers': {\n                'mode': 'no-cors',\n                'access-control-allow-origin': '*'\n            },\n            headers: {\n                'Authorization': `Bearer ${this.state.at}`\n            }\n        })\n            .then(r => {\n                if (r.ok) return r.json(); else {\n                    console.error('Error: getLibrary');\n                    sessionStorage.removeItem('mtoken');\n                }\n            })\n            .then(data => {\n                if (data) this.compileList(data);\n            })\n            .then(() => {\n                this.getUserID();\n            });\n    }\n\n    compileList(tracks) {\n        this.setState(() => {\n            return {playlist: []}\n        });\n        if (tracks && tracks.items) {\n            tracks.items.forEach(object => {\n                    const item = object.track;\n                    const track = {\n                        name: item.name,\n                        link: item.external_urls.spotify,\n                        artists: item.artists.map(artist => {\n                            return {name: artist.name, link: artist.external_urls.spotify}\n                        }),\n                        albumArt: item.album.images\n                    };\n                    const tempPlaylist = this.state.playlist;\n                    const tempPlaylistURI = this.state.playlistURI;\n                    tempPlaylist.push(track);\n                    tempPlaylistURI.push(item.uri);\n                    this.setState({\n                        playlist: tempPlaylist,\n                        playlistURI: tempPlaylistURI\n                    })\n                }\n            );\n        }\n    }\n\n    createPlaylist() {\n        const snapshotID = sessionStorage.getItem('playlistSnapshot');\n        if (snapshotID) {\n            this.addTracksToPlaylist(snapshotID);\n        } else {\n            fetch(this.state.endpoints.users + 'users/' + this.state.userID + '/playlists', {\n                method: 'POST',\n                'Access-Control-Allow-Headers': {\n                    'mode': 'no-cors',\n                    'access-control-allow-origin': '*'\n                },\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.state.at}`\n                },\n                body: `{\"name\":\"Recently Added\",\"public\":false,\"description\":\"Your top 20 recently added Spotify tracks. Happy 2020! - Anna :)\"}`\n            })\n                .then(r => {\n                    if (r.ok) return r.json();\n                    else console.error('Error: createPlaylist');\n                })\n                .then(data => {\n                    if (data) this.addTracksToPlaylist(data.id);\n                });\n        }\n    }\n\n    addTracksToPlaylist(playlistID) {\n        fetch(this.state.endpoints.users + 'playlists/' + playlistID + '/tracks', {\n            method: 'POST',\n            'Access-Control-Allow-Headers': {\n                'mode': 'no-cors',\n                'access-control-allow-origin': '*'\n            },\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${this.state.at}`\n            },\n            body: `{\"uris\":${JSON.stringify(this.state.playlistURI)}}`\n        })\n            .then(r => r.json())\n            .then(data => {\n                if (data.error && data.error.status >= 400 && data.error.message === 'Invalid playlist Id') {\n                    sessionStorage.removeItem('playlistSnapshot');\n                    this.createPlaylist();\n                } else if (data) {\n                    sessionStorage.setItem('playlistSnapshot', data.snapshot_id);\n                    this.setState({playlistCreated: true})\n                }\n            });\n    }\n\n    getUserID() {\n        fetch((this.state.endpoints.users + 'me'), {\n            'Access-Control-Allow-Headers': {\n                'mode': 'no-cors',\n                'access-control-allow-origin': '*'\n            },\n            headers: {\n                'Authorization': `Bearer ${this.state.at}`\n            }\n        })\n            .then(r => {\n                if (r.ok) return r.json();\n                else console.error('Error: getUserID');\n            })\n            .then(data => {\n                    if (data) {\n                        this.setState({userID: data.id});\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <div className=\"Playlist\">\n                {this.state.playlist.length > 0 ? (\n                    <span className=\"button-div position-right\">\n                        {this.state.playlistCreated ? (<p className=\"button-link\">Done!</p>) :\n                            (<button className=\"button-link\" onClick={this.createPlaylist}>Create this playlist on\n                                Spotify for me\n                            </button>)\n                        }\n                    </span>) : (\n                    <div className=\"button-div\"><a href={this.state.links.authLink}>Click on me to authorize\n                        Spotify</a>\n                    </div>\n                )}\n                <ul>\n                    {this.state.playlist.map(\n                        (track, index) => {\n                            return (\n                                <li key={index}><Track track={track}/></li>\n                            )\n                        }\n                    )\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Playlist;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Playlist/Playlist.js	(date 1578287920000)
+++ src/Playlist/Playlist.js	(date 1578299753000)
@@ -28,6 +28,7 @@
         this.generateAuthLink = this.generateAuthLink.bind(this);
         this.addTracksToPlaylist = this.addTracksToPlaylist.bind(this);
         this.createPlaylist = this.createPlaylist.bind(this);
+        this.createConfetti = this.createConfetti.bind(this);
     };
 
     componentDidMount() {
@@ -213,12 +214,72 @@
             );
     }
 
+    getCircleX(deg, radius) {
+        const radians = deg * (Math.PI / 180);
+        return Math.sin(radians) * radius;
+    }
+
+    getCircleY(deg, radius) {
+        const radians = deg * (Math.PI / 180);
+        return Math.cos(radians) * radius;
+    }
+
+    getColor(i) {
+        const colors = ['rgb(108, 220, 254)', 'rgb(55, 223, 159)', 'rgb(104, 74, 179)', 'rgb(245, 163, 199)', 'rgb(242, 107, 60)', 'rgb(241, 80, 98)', 'rgb(254, 253, 223)', 'rgb(105, 192, 123)',
+            'rgb(183, 124, 168)'];
+        const color = Math.round(i) % (colors.length);
+        console.log('COLOR', color, 'I', i);
+        return (colors[color]);
+    }
+
+    animateConfetti(elem, i) {
+
+    }
+
+    createConfetti() {
+        console.log('BOOM');
+        const container = document.getElementById('confetti-container');
+        container.innerHTML = '';
+        for (let i = 1; i <= 360; i += 30) {
+            const elem = document.createElement('span');
+            elem.style.top = '0px';
+            elem.style.left = '0px';
+            const r = (Math.random() * 7) + 5;
+            elem.style.width = r.toString() + 'px';
+            elem.style.height = r.toString() + 'px';
+            elem.classList.add('confetti');
+            elem.style.backgroundColor = this.getColor(i / 30);
+            console.log('BOOM?', 'i: ', i, 'top', (Math.sin(i) * 10), 'left', (Math.cos(i) * 10), elem.style.backgroundColor);
+            // this.animateConfetti(elem, i);
+            elem.style.webkitTranslate = 'transform 5s linear ease-in-out';
+            console.log('ELEM translate', elem.style.webkitTranslate);
+            container.appendChild(elem);
+        }
+        container.style.visibility = 'visible';
+        let i = 1;
+        // container.getChildren().forEach(elem => {
+        for (let j = 0; j < container.children.length; j++) {
+            const elem = container.children[j];
+            const radius = 100;
+            const x = Math.round(this.getCircleY(i, radius)).toString() + 'px';
+            const y = Math.round(this.getCircleX(i, radius)).toString() + 'px';
+            const meow = 'translate(' + x.toString() + ',' + y.toString() + ')';
+            elem.style.webkitTransform = meow;
+            i += 30;
+        }
+    }
+
     render() {
         return (
             <div className="Playlist">
+                <span className="button-div position-right">
+                    <p onClick={this.createConfetti} className="button-link done-button">Done!<span
+                        id="confetti-container"/></p>
+                </span>
                 {this.state.playlist.length > 0 ? (
                     <span className="button-div position-right">
-                        {this.state.playlistCreated ? (<p className="button-link">Done!</p>) :
+                        {this.state.playlistCreated ? (
+                                <p onClick={this.createConfetti} className="button-link done-button">Done!<span/></p>) :
                             (<button className="button-link" onClick={this.createPlaylist}>Create this playlist on
                                 Spotify for me
                             </button>)
Index: src/Track/Track.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>.Track {\n  position: relative;\n  display: flex;\n  flex-flow: column wrap;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.track-image-small, .track-image-small img {\n  width: 250px;\n  height: 250px;\n}\n\n.Track:hover .track-details {\n  background-color: #808080a6;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  visibility: visible;\n}\n\n.track-details {\n  padding: 10%;\n  box-sizing: border-box;\n  position: absolute;\n  top: 0;\n  visibility: hidden;\n}\n\n.track-title * {\n  font-size: 36px;\n  overflow-wrap: anywhere;\n  color: #ffffffc4 !important;\n}\n\n.track-artist * {\n  font-size: 24px;\n  color: #ffffffc4 !important;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Track/Track.scss	(date 1578287920000)
+++ src/Track/Track.scss	(date 1578299753000)
@@ -11,12 +11,12 @@
   height: 250px;
 }
 
+.Track:hover .track-image-small img {
+  -webkit-filter: brightness(75%) contrast(50%) sepia(10%); /* Safari 6.0 - 9.0 */
+  filter: brightness(75%) contrast(50%) sepia(10%);
+}
+
 .Track:hover .track-details {
-  background-color: #808080a6;
-  top: 0;
-  left: 0;
-  height: 100%;
-  width: 100%;
   visibility: visible;
 }
 
@@ -25,6 +25,7 @@
   box-sizing: border-box;
   position: absolute;
   top: 0;
+  left: 0;
   visibility: hidden;
 }
 
Index: src/Playlist/Playlist.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>.Playlist {\n  margin-top: 50%;\n}\n\n.button-div {\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: white;\n  height: 50px;\n  border-radius: 5px;\n  box-shadow: 10px 12px rgba(25, 25, 240, 0.5);\n  padding: 10px;\n  border: 1px solid black;\n}\n\n.button-div:hover {\n  font-weight: bold;\n  box-shadow: 2px 2px rgba(25, 25, 240, 0.7);\n  transform: translate(11px, 9px);\n  border: 2px solid black;\n  cursor: pointer;\n}\n\n.button-div:hover > .button-link {\n  font-weight: bold;\n}\n\n.position-right {\n  position: fixed;\n  right: 10%;\n}\n\n.button-link {\n  color: rgb(106, 103, 206);\n  cursor: pointer;\n  border: none;\n  background: transparent;\n  font-size: inherit;\n  font-family: inherit;\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Playlist/Playlist.scss	(date 1578287920000)
+++ src/Playlist/Playlist.scss	(date 1578299753000)
@@ -41,3 +41,17 @@
   font-family: inherit;
 }
 
+#confetti-container {
+  visibility: hidden;
+  position: absolute;
+  left: 30%;
+}
+
+.confetti {
+  height: 5px;
+  width: 5px;
+  background-color: #d54343;
+  position: absolute;
+  z-index: -999;
+  transition: transform 2s linear 0s 1 ease-in-out;
+}
